- The "kinds of values" that can be manipulated in a language are known as "types"
- Variable is a symbolic name for a "value"
- Values belong to a type
- There are two 'types' of values in JS:
- 1. Primitives (5): Includes `Number`, `String`, `Boolean`
- There are two other primitives: `null` and `undefined`. They are special bcoz the only value in null type is null.
- The only value in undefined type is undefined.
- 2. `Object`: Any non-primitive type. (includes arrays and fns)
- Ordinary object => unordered collection of named values
- Array object => ordered collection of numbered values
- Function object => object with executable code. Invoking it runs the executable code and returns a computed value.
- Arrays and functions are special objects and have different syntax to represent each of them.
- Functions written to be used with the 'new' operator are known as "constructors"
- Each constructor defines a class of objects.
- "Array" and "Function" are constructors (classes of objects).
- There are 3 more useful, built in constructors in core JS:
- 1. Date
- 2. RegExp
- 3. Error
- JS performs "garbage collection" - done automatically. User need not do anything.
- When an object becomes unreachable by a program (no way to refer to it) - it is removed from memory.
- JS is object oriented - we can call methods on values (Ex: Array a => a.sort()) - need not create sort() and pass `a`.
- null and undefined are the only values that do not have methods.
- Another classification of types (Two):
- 1. Mutable: value of a mutable type can change. Object's value changes if its props changes, (same for arrays/fns)
- 2. Immutable: values of this type cannot change. It includes Numbers, Strings, Booleans, null and undefined (primtives)
- A Number is immutable => the value 5 cannot become 6
- A String is immutable => JS has made it so (even though it can be considered an array of chars).
- JS converts from one type to another liberally and variables are untyped (assign any value to any variable).
- JS has "Lexical Scoping": vars outside function have 'global scope' and are visible everywhere. 
- vars declared inside function have 'function scope' and are visible only to code appearing inside that func.


(A) Numbers:
============

- Only one type: Number
- All numbers are floating point values (including integers)
- Numbers are represented in 64-bit floating point format (IEEE 754)
- Number range for integers => -2^53 to 2^53 (Inclusive)
- Number range for floating point values => ~(+/-1.7 * 10^308) (largest float) to +/-(5 * 10^-324) (smallest)
- Out of range values lose precision.
- Certain operations are performed on 32bit integers (instead of 64bit floats) => array indexing, bitwise ops, etc.
- Numeric literal: A number appearing directly in program
- Negative numbers have `-` prefixed. Minus is negation operator and not part of the number syntax.

- Integer Literals:
- Base 10 numbers have digits from 0-9 and start with any of them.
- Base 16 (Hexa) numbers start with `0x` or `0X` followed by hexa digits (0-9, A-f (or a-f))
- Base 8 (Octal) is forbidden in Strict Mode in ES5+ (Don't use it - requies leading 0 followed by any of 0-7)
- Only some browsers implement octals - but it's not standard

- Floating point literals:
- Can be written as "Real" numbers (xxx.xxx => Ex: 123.456)
- Alternate representation of floats: Exponent form:
- Syntax: (RealNumber)(E|e)(+/-)(digits)
- Ex 1: 6.02e23 => 6.02 * 10^23
- Ex 2: 1.47E-32 => 1.47 * 10^-32

- Arithmetic in JS:
- +, -, *, /, % (remainder)
- "Math" library exists apart from the 5 arithm. operators (Ex: Math.pow(2, 4), Math.ceil(1.6)), etc
- Math.random() returns a pseudo-random number x such that 0 <= x < 1.0 (It can never be 1 but can be 0).
- Two special global variables exist (They are read-only in ES5+):
- 1. Infinity (Negative infinity is represented with negation: -Infinity)
- 2. NaN (Not a number)
- Handling "overflow" in JS => JS outputs Infinity. Ex: Try (Number.MAX_VALUE + 1).
- Handling "underflow" in JS => JS outputs -Infinity. Ex: Try (-Number.MAX_VALUE - 1).
- If a number is "too close to 0" to be represented by JS => It is made equal to 0 (Ex: 1/Infinity or Number.MIN_VALUE/2) (It hardly makes a diff to devs).
- Negative Zero and Positive Zero are indistinguishable except when used as divisor (They give Infinity and -Infinity resp.)
- Number.POSITIVE_INFINITY === Infinity
- Number.NEGATIVE_INFINITY === -Infinity
- Number.MIN_VALUE is not a negative number (It is the smallest +ve number (closest to 0) in JS). (-Number.MIN_VALUE is -ve)
- Number.MAX_VALUE is not a negative number (It is the largest +ve number in JS). (-Number.MAX_VALUE is -ve) 

- Note (4): (Occurrence of NaN)
- 1. Zero/Zero => Returns NaN
- 2. Infinity/Infinity
- 3. Root of Negative Number. Ex: Math.sqrt(-5)
- 4. When Non-numeric operands that cannot be converted to number exist in an operation.

- Note (1): (Dividing by Zero)
- Number/Zero => Returns Infinity for positive number, -Infinity for negative number. (Dividing a number by 0 does not give NaN if that number is not Infinity/Zero/Non-Numeric).

- Note (4): (About NaN)
- 1. NaN behaves surprisingly in JS => It's NOT equal to any number in JS including itself. (NaN === NaN is `false`)
- 2. Checking if a number x is NaN => `x != x` (The only time this return true is if x is NaN)
- 3. Using isNaN(x) => Returns `true` if x is NaN or a non-numeric value such as a string/object.
- 4. isFinite(x) => A related function to isNaN. `true` if x is a number other than NaN, Infinity, or -Infinity.

- Binary Floating Point and Rounding Errors:
- Only finite number of real numbers (floating point nums) can be represented in JS
- JS follows IEEE 754 FP Std (Uses 64 bit values)
- It can represent fractions where divisor is a power of 2 perfectly (Ex. 1/2, 1/4, 1/8, ..., 1/1024)
- It cannot represent other fractions perfectly (Ex. 1/10, 1/100, etc) - Approximates.
- Therefore: (0.3 - 0.2 = 0.0999...8) while (0.2 - 0.1 = 0.1). So, (0.3 - 0.2) == (0.2 - 0.1) returns FALSE!
- Note that this problem affects many modern prog langs that rely on IEEE754 (or, binary FP stds.)

- Date & Time:
- Date is a constructor (it is not a fundamental type)
- It creates objects => that represent data and time
- It has methods that provide an API to access and manipulate date/time
- Difference between two dates = Interval in Milliseconds

(B) Text:
=========

- Strings are ordered sequence of unicode characters and it is immutable.
- Each unicode char is 16 bits long.
- Strings use 0 based indexing (1st char -> index 0, 2nd char -> index 1, etc)
- Some unicode char codepoints don't fit into 16 bits -> they are represented using two 16bit values (surrogate pairs).
- JS string methods mostly operate on 16 bit values (and not on chars).
- JS does not treat surrogate pairs specially (it does not perform any normalization)

- String literals are enclosed either in '' or "".
- "" strings can have ' inside them. '' strings can have " inside them. (vice-versa)
- Use backslash(\) to escape characters. Ex: \' escapes ' inside a '' string. \" escapes " inside a "" string.
- Writing (single line) strings on multiple lines: End a line with backslash (both the \ and following newline are ignored).
- Actually adding a new line to the string: Place \n inside the string where you want a new line.
- HTML can also use "" and '' for its attribute values - when combined with JS use one type for JS('') and other for HTML("")

- Escaping characters: Use backslash(\) within the string
- Exs: \', \", \n, \t, etc.
- If backslash precedes a character that does not have an escaped form => Ignores backslash ('\#' === '#')
- Two generic escape characters:
- 1. Latin-1 char: (Form: \xXX) (Ex: \xA9 is copyright char) (X = hexa digit)
- 2. Unicode char: (Form: \uXXXX) (Ex: \u03c0 is the pi char) (X = hexa digit)

- Working with strings:
- Use "+" operator to concatenate strings.
- Use "length" property to get the length of a string (Ex: `str = "abc"; str.length; // 3`)
- Many String methods are available (charAt(), replace(), indexOf(), substring(), split(), etc)
- Note that string is Immutable! Methods that manipulate strings (replace(), toUppercase(), etc) return new strings (original string is unaltered).
- Strings can be treated like Read-Only Arrays - we can access individual chars with [] notation (str[0] <=> str.charAt(0)).

- Pattern Matching:
- RegExp is not a fundamental type but it's a constructor for special objects.
- Both Strings and RegExp objects have API for regular expressions.
- Regular expressions can be written in the literal form too (Without RegExp constructor): Pattern Within // and flags after it. (Ex: /^Hello/gi)
- There are many methods defined by RegExp and Strings to work with regular expressions:
- pattern.test(text), text.search(pattern), text.match(pattern), text.replace(pattern, replacementString), text.split(pattern).

(B) Boolean Values:
===================

- There are only two values of Boolean type: true and false.
- Usually the result of a comparison operation (==, ===, !=, >, <, >=, etc)
- They are generally used in conditionals like in control structures (like if).
- Any JS value can be converted to a boolean!
- There are 6 falsy values:
- 1. '' (empty string)
- 2. 0 (Zero) and -0 (Negative Zero)
- 3. null
- 4. undefined
- 5. NaN
- 6. false 
- All other values (such as other strings, numbers, objects, arrays, ...) are truthy! Ex: {} is truthy and so is [].
- Booleans have no useful methods other than "toString()" => converts them to "true" or "false".
- && is boolean AND (true if both operands are true, else false)
- || is boolean OR (false if both operands are false, else true)
- ! is the boolean NOT (converts false to true and vice-versa)

(C) null and undefined:
=======================

- null is language keyword. (and it is the only value of type null)
- undefined is a predefined global variable (and is the only value of type undefined)
- null is a special value that refers to "absence of a value" (program level, normal, expected behavior)
- undefined is a deepeer kind of absence of value (system level, unexpected or error like behavior)
- `typeof null` returns "object" (null can be thought of as a special object value indicating 'no object').
- Note that `typeof null` does not return "null".
- `typeof undefined` returns "undefined".
- When is a value undefined?
- 1. Variable has been declared but not initialized (reading such a var returns undefined)
- 2. Value that is returned from functions that do not have a return value.
- 3. A function parameter's value when no argument is passed to the function for that param.
- If you want to explicitly assign a var a value that indicates an absence of value => go for `null` (since it is expected, program-level behavior)
- `null == undefined` returns `true` (loose equality)
- `null === undefined` returns `false` (strict equality)

(D) Global Object:
==================

- The global object is very important. Every host environment has a global object (browser, node)
- The properties of the global object are the predefined global variables available to us. (Ex: Infinity, String(), isNaN(), Date(), RegExp(), etc.) The predefined global variables are loaded when the js interpreter (browser) starts.
- Therefore, predefined global vars should be treated as reserved keywords (even though they aren't)
- In the browser, the global object is identified as the `window`.
- Therefore, `window.Infinity === Infinity` returns true.
- In the global scope, the global object (window) can be referenced via `this` (not applicable to other, function scopes).
- The window object has a self-referential property. i.e `window.window` returns the `window` object (same as what `this` returns when in global scope)
- Apart from predefined global vars, any other variable defined in global scope becomes a property of the global object.
- Ex: (In global scope: `var x = 5;` then `x` returns 5 but so does `window.x`)





