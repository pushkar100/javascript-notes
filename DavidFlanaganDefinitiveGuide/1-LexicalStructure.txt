- Lexical Structure => Syntax of JS.
- Unicode character set (16-bit) used in JS (superset of ASCII & Latin-1).
- JS is Case-Sensitive
- HTML is not Case-Sensitive (But XHTML is!)
- Whitespaces and Line breaks are ignored
- Space, non-breaking space, tab, etc => Considered spaces (ignored)
- Line feed, Carriage-return, paragraph separator => Considered line breaks (ignored)
- Some Unicode characters cannot appear in older hardware => Use 6 character ASCII code to represent the 16-bit Unicode. These are known as Unicode escapes.
- \u00e9 : A unicode escape
- Unicode escapes can occur in string literals, regular expression literals and identifiers (var names)
- Unicode escapes cannot occur in Language Keywords (Ex: `for`)
- There is more than one way to represent certain unicode characters. They have different encodings but are normalized while being displayed.
- Javascript assumes that its strings are already normalized to a canonical form suitable for string comparisons!
- // => Single line comment (from // to end of line is ignored)
- /* ... */ => Multiline comment (Cannot be nested)
- Literal => Any value that appears directly in a program
- 12, 1.2 are Number literals
- "String1", 'Hi' are String literals
- /javascr/gi => Regular expression literal
- null => No object (null) literal, etc (many more!)
- { a: 5}, [1, 2] => Complex literals (object and array literals) made out of sub-expressions
- Identifiers => Names for variables, functions and labels
- Identifiers can contain => letters, digits, underscore(_) and dollar($) 
- Identifiers cannot start with a digit
- Letters from other languages (say, french) are allowed in JS bcoz they are part of Unicode
- Reserved words => Identifiers for keywords of language and cannot be used for naming other things
- Set 1 of reserved words => for, while, delete, finally, catch, etc.
- Set 2 of reserved words (makes sense now with ES6) => class, super, import, etc.
- Reserved words in Strict Mode => arguments, eval
- Not reserved but don't use these for other names (conflicts) => Infinity, Number, JSON, TypeError, etc.
- Not reserved but don't use them depending on host env => window, global, etc.
- Automatic semicolon insertion => You can usually omit the semicolon between two statements if those statements are written on separate lines (line break separating them). There are exceptions!
- line break is treated as semicolon (ending prev stmt) if the next non-space character CANNOT be treated as continuation of prev stmt
- Confusion arises when next non-space char is (, [, /, +, -, etc bcoz they can be treated as functiona calls/array indexing and will not add semicolon before it.
- Two exceptions to Automatic Semicolon Insertion:
- 1. return, break, continue => A line break is always treated as a semicolon (So, don't insert line break btw return and return expr.)
- 2. ++ & -- operators => A line break is always treated as a semicolon. These operators are always considered prefix unless they are on the same line as the variable (i.e x++).






